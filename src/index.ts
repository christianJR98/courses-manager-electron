import { app, BrowserWindow, ipcMain } from 'electron';
const fs = require('fs').promises;
import { generateId } from './utils/generateId';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

const writeFile = async (dataJson: Course[]) => {
  await fs.writeFile(`./src/data/My_data.json`, JSON.stringify(dataJson), 'utf8');
}

const getCourses = async () => {
  const fileData = await fs.readFile(`./src/data/My_data.json`, 'utf8');

  return JSON.parse(fileData);
}

const saveImage = async (path: string, name: string) => {
  await fs.copyFile(path, `./src/data/images/${name}`);
}

const addCourse = async (e: any, data: Course) => {
  e.preventDefault();
  const courses = await getCourses();
  const id = generateId();
  const { image } = data;
  const extension = image.substring(image.lastIndexOf('/') + 1).split('.')[1];

  await saveImage(data.image, `${id}.${extension}`);
  courses.push({ ...data, id, image: `${id}.${extension}` });
  await writeFile(courses);
}

const getCourse = async (id: string) => {

}

const deleteCourse = async (id: string) => {

}

ipcMain.handle('addCourse', addCourse);
ipcMain.handle('getCourses', getCourses);


const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1080,
    width: 1920,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

const initiApp = (): void => {
  // TODO: if there is no file, create the file with an empty array
  createWindow();
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', initiApp);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
